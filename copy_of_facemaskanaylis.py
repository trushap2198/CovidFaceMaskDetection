# -*- coding: utf-8 -*-
"""Copy of FaceMaskAnaylis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16_T-SCsZkE9vKJSxdpMQY29XhdEDSWd9
"""

from sklearn.metrics import confusion_matrix, classification_report
import seaborn as sns
import torch
import matplotlib.pyplot as plt
import pickle
device = "cuda" if torch.cuda.is_available() else "cpu"
translate_label = {'No_Mask': 0, 'Cloth_mask': 1, 'N95_mask': 2, 'N95_with_Valve': 3, 'Surgical_mask': 4}

from google.colab import drive
drive.mount("/content/gdrive", force_remount=True)

def plot_loss(train_loss, val_loss):
    """ Plot the losses in each epoch"""
    plt.plot(train_loss, '-bx')
    plt.plot(val_loss, '-rx')
    plt.xlabel('epoch')
    plt.ylabel('loss')
    plt.legend(['Training', 'Validation'])
    plt.title('Loss vs. No. of epochs')
    #plt.savefig('plots/plot_loss.png')

def plot_accuracies(train_accuracy, val_accuracy):
    """ Plot the history of accuracies"""
    plt.plot(train_accuracy, '-bx')
    plt.plot(val_accuracy, '-rx')
    plt.xlabel('epoch')
    plt.ylabel('accuracy')
    plt.legend(['Training', 'Validation'])
    plt.title('Accuracy vs. No. of epochs');
    #plt.savefig('plots/plot_accuracy.png')

def show_confusion_matrix(y_true, y_preds, name):
    matrix = confusion_matrix(y_true.numpy(), y_preds.numpy())
    print("Showing confusion matrix for " + name)
    print(matrix)
    plt.figure(figsize=(15, 10))
    ax = sns.heatmap(matrix, fmt='', annot=True, cmap='Reds')
    ax.set_title('Confusion Matrix')
    ax.set_xlabel('Predicted Mask Type')
    ax.set_ylabel('Actual Mask Type')
    ax.xaxis.set_ticklabels([i for i in translate_label.keys()])
    ax.yaxis.set_ticklabels([i for i in translate_label.keys()])
    print(name)
    #plt.savefig(name)
    plt.show()
    plt.close()

historyK = pickle.load(open('/content/gdrive/MyDrive/data.pkl', 'rb'))

##Aggregate accuaracy and loss
def createAvg(historyK):
  avg = {}
  for label in ['val_loss' , 'train_loss', 'val_acc', 'train_acc' ]:
    avg[label] = [0 for i in range(40)]
  for h in historyK:
    for i in range(40):
      for label in ['val_loss' , 'train_loss', 'val_acc', 'train_acc' ]:
        avg[label][i]= avg[label][i] + h[label][i]
  for label in ['val_loss' , 'train_loss', 'val_acc', 'train_acc' ]:
      avg[label] = [i/len(historyK) for i in avg[label]]
  return avg

history =  createAvg(historyK)
fig = plt.figure(figsize=(20,5))
fig.suptitle("Aggreagate Analysis of kfold")
plt.subplot(1,2,1)
plot_loss(history['train_loss'], history['val_loss'])
plt.subplot(1,2,2)
plot_accuracies(history['train_acc'], history['val_acc'])



##agregate results
realAgg = []
predAgg = []
for epoch in range(len(historyK[0]['real'])):
       realAgg.append(torch.cat([history['real'][epoch].cpu() for history in historyK]))
       predAgg.append(torch.cat([history['predication'][epoch].cpu()  for history in historyK]))

show_confusion_matrix(realAgg[-1], predAgg[-1], str("Aggreagate confusion matrix of last ofK fold"))

for i in range(len(historyK)):
  history = historyK[i]
  print("classification_report for last epoch of " + str(i+1) + "th fold")
  print(classification_report(history['real'][-1].cpu(), history['predication'][-1].cpu()))